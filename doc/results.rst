Simulation results processing
=============================

Results form Sailfish simulations can saved to disk for processing in external
appliations or visualized in real-time.  These options are not exlusive, so
concurrent visualization and data saving is fully supported.

Data output
-----------

Sailfish supports two basic output data formats, provided the associated Python modules
are installed: HDF5 and VTK.  The data format is selected
using the ``--output_format`` command line option, which can take one of the
following values: ``h5nested``, ``h5flat``, ``vtk``.  The first two of those correspond
to different ways of saving the data to HDF5 files.  In all modes, the name of the
file is specified using the ``--output`` command line option, though the exact meaning
of this is different for different file formats.

In the ``h5nested`` mode, a single HDF5 file is created.  The file contains a single
group called ``results``.  The group contains a single table and each record in this
table corresponds to the state of the simulation at a specific iteration.  The table
contains columns for velocity components (``vx``, ``vy`` and ``vz``), density (``rho``)
and the current iteration (``iter``).

In the ``h5flat`` mode, also a single HDF5 file is created.  The file contains
multiple groups, called ``iterXXX`` where ``XXX`` is the iteration number.  Each
of the groups contains two arrays: ``v`` for the velocity vector field, and ``rho``
for the density scalar field.

In the ``vtk`` mode, multiple XML VTK files are generated, each containing the state
of the simulation at a specific iteration.  The file names are generated by appending
the iteration number to the base name provided via the ``--output`` option, e.g. if
``--output=poiseuille`` is used, ``poiseuille00400.xml`` will contain data for the
400-th iteration.  The output files contain two fields: a scalar field named ``density``
and a vector field called ``velocity``.

Data visualization
------------------

Sailfish supports on-line data visualization without writing out any results
to files on disk.  The visualization modules for 2D and 3D are completely different,
and thus they will be discussed separately.

Visualization of 2D data
^^^^^^^^^^^^^^^^^^^^^^^^

2D simulations can be monitored using an interactive pygame-based interface.
The interface supports the following color schemes:

* ``std`` (default): a simple palette with a single color (yellow)
* ``rgb1``: default color palette from gnuplot
* ``hsv``: HSV colorspace; visualized quantities determine the 'hue' component
* ``2col``: a scheme with 2 colors: blue (for negative values) and red (for positive ones)

The color schemes can be selected from the command line using the ``--vismode`` option.

The initial size of the visualization window can be controlled with command line parameters.
One can specify its size explicitly using the ``--scr_w`` and ``--scr_h`` options
to set the width and height, respectively.  Alternatively, the ``--scr_scale`` option can
be used to make the window dimensions directly proportional to those of the lattice, e.g.
if ``--scr_scale=3`` is used the window will be 3 times larger than the lattice and each
lattice site will be visualized as a 3x3 square.

Interaction with the simulation is provided via mouse: left key presses place walls
(i.e. nodes with the no-slip boundary condition, with no intrinsic velocity) in the
simulation domain, and right key presses remove them.

The visualization module can be controlled from the keyboard, and the following
keys are defined:

* 0: visualize the norm of the fluid velocity
* 1: visualize the x component of the fluid velocity
* 2: visualize the y component of the fluid velocity
* 3: visualize variations in the fluid density
* 4: visualize the vorticity of the fluid
* i: toggle visibility of text info about the state of the simulation (MLUPS, iteration etc.)
* v: toggle visualization of the velocity vector field
* t: toggle visualization of the fluid tracer particles
* c: toggle convolution of the visualization with a Gaussian kernel (this has a smoothing effect)
* r: reset the simulation geometry (this clears any obstacles added interactively)
* q: quit the simulation
* s: take a screenshot
* ,: decrease the max value used for visualization
* .: increase the max value used for visualization

The *max value* above corresponds to either the maximum velocity or maximum vorticity,
depending on the current visualization mode.  Changing this value will affect the color
scale of the visualized field.

Visualization of 3D data
^^^^^^^^^^^^^^^^^^^^^^^^

3D data visualization is provided via the mayavi package.  This visualization is
not interactive at this time.

3D data can also be visualized in *cutplane* mode, using the pygame-based interface.
To select this mode, use the ``--vis3d=cutplane`` command line option.  Only cutplanes
perpendicular to a domain axis are currently supported.  The ``x``, ``y`` and ``z`` keys
can be used to select the cutplane.  The ``;`` and ``'`` keys can be used to move
the cutplane along the selected axis.  Tracer particles are not supported in the cutplane mode.


